// Code generated by mockery v2.46.3. DO NOT EDIT.

package repo_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SwipeCacheRepository is an autogenerated mock type for the SwipeCacheRepository type
type SwipeCacheRepository struct {
	mock.Mock
}

// GetNonSwiped provides a mock function with given fields: ctx, swiperProfileID, profileIDs
func (_m *SwipeCacheRepository) GetNonSwiped(ctx context.Context, swiperProfileID string, profileIDs []string) ([]string, error) {
	ret := _m.Called(ctx, swiperProfileID, profileIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetNonSwiped")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return rf(ctx, swiperProfileID, profileIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, swiperProfileID, profileIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, swiperProfileID, profileIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAsSwiped provides a mock function with given fields: ctx, swiperProfileID, profileID
func (_m *SwipeCacheRepository) MarkAsSwiped(ctx context.Context, swiperProfileID string, profileID string) (bool, error) {
	ret := _m.Called(ctx, swiperProfileID, profileID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsSwiped")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, swiperProfileID, profileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, swiperProfileID, profileID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, swiperProfileID, profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSwipeCacheRepository creates a new instance of SwipeCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSwipeCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SwipeCacheRepository {
	mock := &SwipeCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
