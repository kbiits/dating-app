// Code generated by mockery v2.46.3. DO NOT EDIT.

package repo_mocks

import (
	context "context"

	entity "github.com/kbiits/dealls-take-home-test/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// PremiumPackageRepository is an autogenerated mock type for the PremiumPackageRepository type
type PremiumPackageRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PremiumPackageRepository) GetByID(ctx context.Context, id string) (entity.PremiumPackage, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entity.PremiumPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.PremiumPackage, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.PremiumPackage); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.PremiumPackage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPremiumPackageRepository creates a new instance of PremiumPackageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPremiumPackageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PremiumPackageRepository {
	mock := &PremiumPackageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
