// Code generated by mockery v2.46.3. DO NOT EDIT.

package repo_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SwipeRepository is an autogenerated mock type for the SwipeRepository type
type SwipeRepository struct {
	mock.Mock
}

// CountUserSwipeByDate provides a mock function with given fields: ctx, userID, date
func (_m *SwipeRepository) CountUserSwipeByDate(ctx context.Context, userID string, date string) (int, error) {
	ret := _m.Called(ctx, userID, date)

	if len(ret) == 0 {
		panic("no return value specified for CountUserSwipeByDate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return rf(ctx, userID, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, userID, date)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSwipeRepository creates a new instance of SwipeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSwipeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SwipeRepository {
	mock := &SwipeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
